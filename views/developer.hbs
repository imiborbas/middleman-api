<!DOCTYPE html>
<html>
  <head>
    {{> head}}
  </head>
  <body>
    {{> header}}
    <div id="product-description">
      <p>Kelp lets you spin up cloud-hosted wallets so that your users can use your dapps without a web3-enabled browser. To get started, <a href="https://docs.kelp.cloud">check out the docs</a> or try it out manually below.</p>
      <a href="http://docs.kelp.cloud"><button class="pure-button">Check Out The API</button></a>
    </div>
    <div class='demo'>
      <h3>Try It Out First</h3>
      <div id='create-wallet'>
        <p>Try out the form below to generate a wallet on behalf of a user. Type in an email address or user identifier and press submit.</p>
        <form class="pure-form" id="create-wallet__form" autocomplete="off">
          <label>User ID or Email:</label><br>
          <input name="userid" type="text" placeholder="mayor@dani.town" autofocus />
          <button class="pure-button" type="submit">Create A Wallet</button>
        </form>
        <div class='wallet-demo'></div>
      </div>
    </div>
    <div id="wallet-creation-success-message"></div>
    <div id="wallet-table"><table class="pure-table" id="wallet-table__table"></table></div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script>

      // helper for generating table rows for wallets
      function generateHTML(wallet) {
        return `<tr><td>${createdAt(wallet._id)}</td><td><span class="wallet-address preformatted">${wallet.address}</span></td><td>${wallet.user_id}</td><td>${wallet.balance} ETH</td></tr>`
      }

      // auth function that redirects user to login if not authed and otherwise returns dev info
      async function auth() {
        //  if no cookie, redirect to Login
        if (document.cookie === '') { window.location = '/login'; }

        // otherwise get id
        let developerId = await fetch('/developers/me', {
          headers: {
            'x-auth-key': document.cookie
          }
        }).catch((e) => {
          // error authenticating, redirect the user to login
          window.location = '/login';
        })
          return developerId.json()
      }

      //main
      void async function() {
        //first auth the user. devId is at account._id, email is at account.email
        let {account} = await auth();

        // display the user's email in the top corner
        // TODO: later on this should be a link to the account section
        jQuery('header').append(`<p id="my-email"><a href="/account">${account.email}</a></p>`);

        // create the table
        // TODO: Later on this should only be created if there are wallets to display
        jQuery('#wallet-table__table').append('<thead><tr><th>Created</th><th>Address</th><th>UserID</th><th>Balance</th></tr></thead>');


        // need to pass in dev id
        let {wallets} = await getWallets(account._id)

        await Promise.all(wallets.map(async wallet => {
          wallet.balance = await getWalletBalance(wallet._id)
        }))

        let table = document.getElementById('wallet-table__table')
        let html = wallets.map(generateHTML).join('')
        table.innerHTML += html

        let walletAddresses = document.getElementsByClassName('wallet-address')

        // if you click on a wallet, we append to the #demo block some signing functions for you to try out
        jQuery('.wallet-address').on('click', function(e) {
          document.getElementById('create-wallet').className = 'border-bottom';
          document.getElementsByClassName('wallet-demo')[0].innerHTML = signingHtml;

          // fill in the form fields with the wallet address
          let currentWalletAddr = e.currentTarget.innerText;
          jQuery('[name=wallet-address]').val(currentWalletAddr);

          // handle if someone tries to sign a message

          jQuery('#signing-demo__form').on('submit', function(e) {
            e.preventDefault();

            // get message to sign
            //don't need to get wallet address because already have it in currentWalletAddr
            let messageToSign = jQuery('[name=message]').val();


            // go sign it
            // TODO need get wallet by address and then ability to sign based on that.
            // TODO or can make it - if not valid id, then try to get wallet by address

            jQuery.post({
              url: `/wallets/address/${currentWalletAddr}/sign_message` ,
              type: 'post',
              data: {
                message: messageToSign
              },
              headers: {
                'x-auth-key': document.cookie
              }
            }, function(data, status) {
              // clear form field
              jQuery('[name=message]').val("");

              // display success banner with signed message
              // TODO pretty print this. i think it should be JSON.parse(JSON.stringify(data)).message.messageHash but like who knows
              let signedMessageObj = JSON.parse(JSON.stringify(data)).message;

              let signedMessageTable = `<table class='pure-table' id='signing-demo__success-table'><thead><tr><th>Field</th><th>Value</th><tr></thead><tbody><tr><td>Message</td><td>${signedMessageObj.message}</td></tr><tr><td>Message Hash</td><td>${signedMessageObj.messageHash}</td></tr><tr><td>Signature</td><td>${signedMessageObj.signature}</td></tr></tbody></table>`;

              jQuery('#signing-message-success-message').html(signedMessageTable);
            }).fail(function(xhr, status, error) {
            // handle fail case
            console.log(error);
            jQuery('[name=message]').val("");
            jQuery('#signing-demo__form').append('<div class="error"> Something went horribly, horribly wrong.</div>');
          })
        })

          // handle if someone tries to sign a transaction
        })


      }()

      // get all the wallets that are attached to the logged in developer
      async function getWallets(myDeveloperId) {
        let res = await fetch(`/wallets/developer/${myDeveloperId}`, {
          headers: {
            'x-auth-key': document.cookie
          }
        })

        return res.json()
      }

      // get wallet balance for a wallet
      async function getWalletBalance(walletId) {
        let res = await fetch(`/wallets/${walletId}/balance`, {
          headers: {
            'x-auth-key': document.cookie
          }
        })

        let {balance} = await res.json()

        return balance
      }

      // Helper function to get the wallet created date from its id
      var createdAt = (walletId) => {
        return new Date(parseInt(walletId.substring(0, 8), 16) * 1000).toLocaleDateString('en-UK');
      };

    //   when submit the generate wallet form, generate a wallet for the user id
      jQuery('#create-wallet__form').on('submit', function(e) {
        e.preventDefault();

        // get userid
        var userid = jQuery('[name=userid]').val();

        // send the data to the create wallet api
        jQuery.post({
          url: '/wallets/',
          type: 'post',
          data: {
            "user_id": userid
          },
          headers: {
            'x-auth-key': document.cookie
          }
        }, function(data, status) {
          // clear form field
          jQuery('[name=userid]').val("");

          jQuery('#wallet-creation-success-message').html(`<p>Success! Created a wallet at the address <span class="wallet-address preformatted">${data.wallet.address}</span> for the user ${data.wallet.user_id}</p>`);

          // add the new wallet to the list
          // TODO fetch balance for it
          jQuery('#wallet-table__table').append(`<tr><td>${createdAt(data.wallet._id)}</td><td><span class="wallet-address preformatted">${data.wallet.address}</span></td><td>${data.wallet.user_id}</td><td>0 ETH</td></tr>`);

        }).fail(function(xhr, status, error) {
        // error handling
          console.log(error);
          jQuery('[name=userid]').val("");
          jQuery('body').append('<div class="error"> Something went horribly, horribly wrong.</div>');
        });
      })

      // html for wallet functions - these appear when a wallet address is clicked.
      const signingHtml = "<div id='signing-demo'> <h3>Sign A Message</h3> <div id='signing-demo__container'> <p>Try out the form below to sign a message using your chosen wallet address. Click on a wallet below to use that address to sign the message.</p> <form class='pure-form pure-form-stacked' id='signing-demo__form' autocomplete='off'> <label>Message To Sign:</label> <input name='message' type='text' placeholder='super legit message' /> <label>Wallet To Use (Choose One By Clicking on It Below):</label> <input name='wallet-address' type='text' placeholder='0x8d3...' disabled /> <button class='pure-button' type='submit'>Sign It</button> </form> </div> </div> <div id='signing-message-success-message'></div> <div id='signing-transaction-demo'> <h3>Sign A Transaction</h3> <div id='signing-transaction-demo__container'> <p>Try out the form below to sign a transaction using a chosen wallet. To choose a wallet, click on it on the page below. This doesn't actually send eth, it just creates a signed transaction object.</p> <form class='pure-form pure-form-stacked' id='signing-transaction-demo__form' autocomplete='off'> <label>To Address</label> <input name='to_addr' type='text' placeholder='0x8d3e809fbd258083a5ba004a527159da535c8aba' /> <label>Amount of ETH to send:</label> <input name='value' type='text' placeholder='0.01' /> <label>Amount of ETH to send:</label> <input name='gas' type='text' placeholder='2000000' /> <label>Wallet To Use (Choose One By Clicking on It Below):</label> <input name='wallet-address' type='text' placeholder='0x8d3...' disabled /> <button class='pure-button' type='submit'>Sign It</button> </form> </div> <div id='signing-transaction-success-message'></div> </div>"

    </script>
  </body>
</html>
