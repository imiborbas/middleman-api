<!DOCTYPE html>
<html>
<head>
  {{> head}}
</head>
  <body>
    <div class="nav-bar">
      <img class="logo hidden-xs" src="https://kelp.nyc3.digitaloceanspaces.com/logo.svg">
      <span class="hidden-xs"><h3><span class="title-box">Middleman</span></h3></span>
      <ul>
        <li id="nav-bar__wallets"><a href="/developers"><i class="material-icons">account_balance_wallet</i><span class="hidden-xs navbar-text"> Wallets</span></a></li>
        <li id="nav-bar__functions"><a href="/functions"><i class="material-icons">attach_money</i><span class="hidden-xs navbar-text"> Functions</span></a></li>
        <li id="nav-bar__docs"><a href="http://docs.middleman.cx" target="_blank"><i class="material-icons">description</i><span class="hidden-xs navbar-text"> Docs</span></a></li>
        <li id="nav-bar__account"><a href="/account"><i class="material-icons">account_box</i><span class="hidden-xs navbar-text"> Account</span></a></li>
        <li id="nav-bar__support"><a href="mailto:mayor@dani.town"><i class="material-icons">help_outline</i><span class="hidden-xs navbar-text"> Support</span></a></li>
      </ul>
    </div>
  <div class="main">
      <!--  CARDS FOR FUNCTIONS -->
    <div class="container">
      <h1>Wallet Functions<span class="badge">Beta</span></h1>
      <!-- sign message card -->
      <div class="card flex-card">
        <div class="card-content">
          <h3>Sign A Message</h3>
          <p class="subtext">You can use a Middleman wallet to sign messages.</p>
        </div>

        <div class="card-form">
          <form id="sign-message__form" autocomplete="off">
            <div class="form-field">
              <label>Message:</label><br>
              <input name="message" type="text" placeholder="message" autofocus />
            </div>
            <div class="form-field">
              <label>Choose a Wallet: </label><br>
                <div class="dropdown">
                <select class="wallet-dropdown-select" onchange="">
                </select>
              </div>
            </div>
            <button type="submit">Submit</button>
          </form>
          <div id="sign-message-message"></div>
        </div>

        <div class="card-api-instructions">
          <div class="card-api-instructions__code-sample">
            <code>curl -X POST "https://api.middleman.cx/wallets/address/:addr/sign" -H "X-Auth-Key: AUTHKEY" --data '{"message": "secure message"}' </code>
          </div>
          <button><i class="material-icons">exit_to_app</i>Docs</button>
        </div>
      </div>



      <!--  Sign Transaction Card -->
      <div class="card flex-card">
        <div class="card-content">
          <h3>Sign A Transaction</h3>
          <p class="subtext">You can use a Middleman wallet to sign transactions. An example address you can use to fill in below is <span class="preformatted lowkey">0x8d3e809fbd258083a5ba004a527159da535c8aba</span></p>
        </div>

        <div class="card-form">
          <form id="sign-transaction__form" autocomplete="off">
            <div class="form-field">
              <label>To:</label><br>
              <input name="to_addr" type="text" placeholder="0x8d3e809fbd258083a5ba004a527159da535c8aba" autofocus />
            </div>
            <div class="form-field">
              <label>Amount of ETH:</label><br>
              <input name="value" type="text" placeholder="1 ETH" autofocus />
            </div>
            <div class="form-field">
              <label>Gas:</label><br>
              <input name="gas" type="text" placeholder="100000" autofocus />
            </div>
            <div class="form-field">
              <label>Choose a Wallet: </label><br>
                <div class="dropdown">
                <select class="wallet-dropdown-select" id="wallet-dropdown" onchange="">
                </select>
              </div>
            </div>
            <button type="submit">Submit</button>
          </form>
          <div id="sign-transaction-message"></div>
        </div>

        <div class="card-api-instructions">
          <div class="card-api-instructions__code-sample">
            <code>curl -X POST "https://api.middleman.cx/wallets/address/:addr/signTransaction" -H "X-Auth-Key: AUTHKEY" --data '{"transaction": { "to": "0x8d3e809fbd258083a5ba004a527159da535c8aba", "value": 1, "gas": 2000000 }}'</code>
          </div>
          <button><i class="material-icons">exit_to_app</i>Docs</button>
        </div>
      </div>

      <!-- recover txn card -->
      <div class="card flex-card">
        <div class="card-content">
          <h3>Recover A Transaction</h3>
          <p class="subtext">You can use a Middleman wallet to recover the address used to sign a transaction. An example raw transaction you can use to fill out below is <span class="preformatted lowkey">0xf869808504e3b29200831e848094f0109fc8df283027b6285cc889f5aa624eac1f55843b9aca008025a0c9cf86333bcb065d140032ecaab5d9281bde80f21b9687b3e94161de42d51895a0727a108a0b8d101465414033c3f705a9c7b826e596766046ee1183dbc8aeaa68</span></p>
        </div>

        <div class="card-form">
          <form id="recover-transaction__form" autocomplete="off">
            <div class="form-field">
              <label>Raw Transaction:</label><br>
              <input name="rawTxn" type="text" placeholder="0xf86180808401ef364594f0109fc8df283027b6285cc889f5aa624eac1f558" autofocus />
            </div>
            <div class="form-field">
              <label>Choose a Wallet: </label><br>
                <div class="dropdown">
                <select class="wallet-dropdown-select" id="wallet-dropdown" onchange="">
                </select>
              </div>
            </div>
            <button type="submit">Submit</button>
          </form>
          <div id="recover-transaction-message"></div>
        </div>

        <div class="card-api-instructions">
          <div class="card-api-instructions__code-sample">
            <code>curl -X POST "https://api.middleman.cx/wallets/address/:addr/recoverTransaction" -H "X-Auth-Key: AUTHKEY" --data '{ "rawTransaction": "0xf869808504e30b8d101465414033c3f705a9c7b826e596766046ee1183dbc8aeaa68" }' </code>
          </div>
          <button><i class="material-icons">exit_to_app</i>Docs</button>
        </div>
      </div>

      <!-- hash message card -->
      <div class="card flex-card">
        <div class="card-content">
          <h3>Hash A Message</h3>
          <p class="subtext">You can use a Middleman wallet to hash a message.</p>
        </div>

        <div class="card-form">
          <form id="hash-message__form" autocomplete="off">
            <div class="form-field">
              <label>Message:</label><br>
              <input name="messagetohash" type="text" placeholder="message" autofocus />
            </div>
            <div class="form-field">
              <label>Choose a Wallet: </label><br>
                <div class="dropdown">
                <select class="wallet-dropdown-select" onchange="">
                </select>
              </div>
            </div>
            <button type="submit">Submit</button>
          </form>
          <div id="hash-message-message"></div>
        </div>

        <div class="card-api-instructions">
          <div class="card-api-instructions__code-sample">
            <code>curl -X POST "https://api.middleman.cx/wallets/address/:addr/hashMessage" -H "X-Auth-Key: AUTHKEY" --data '{"message": "secure message"}'</code>
          </div>
          <button><i class="material-icons">exit_to_app</i>Docs</button>
        </div>
      </div>

    </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script>

      // auth function that redirects user to login if not authed and otherwise returns dev info
      async function auth() {

        let cookie = await getCookie();

        //  if no cookie, redirect to Login
        if (cookie === '') { window.location = '/login'; }

        // otherwise get id
        let developerId = await fetch('/developers/me', {
          headers: {
            'x-auth-key': cookie
          }
        }).catch((e) => {
          // error authenticating, redirect the user to login
          window.location = '/login';
        })
          return developerId.json()
      }

      // helper for generating options for wallets dropdown
      function generateOptionsHTML(wallet) {
        return `<option value=${wallet.address}>${wallet.address}</option>`;
      }

      async function getCookie() {
        let name = '_auth';
        var dc = document.cookie;
        var prefix = name + "=";
        var begin = dc.indexOf("; " + prefix);
        if (begin == -1) {
            begin = dc.indexOf(prefix);
            if (begin != 0) return null;
        }
        else
        {
            begin += 2;
            var end = document.cookie.indexOf(";", begin);
            if (end == -1) {
            end = dc.length;
            }
        }
        // because unescape has been deprecated, replaced with decodeURI
        //return unescape(dc.substring(begin + prefix.length, end));
        return decodeURI(dc.substring(begin + prefix.length, end));
      }

      //main
      void async function() {
        // make the functions link active
        jQuery('#nav-bar__functions').addClass('nav-bar-active');

        //first auth the user. devId is at account._id, email is at account.email
        let {account} = await auth();

        // display the user's email in the bottom corner
        jQuery('.nav-bar ul').append(`<li class="hidden-xs" id="nav-bar__email"><a href="/account"><span id="user-email" class="hidden-xs navbar-text">${account.email}</span></a></li>`);

        // get all the user's wallets

        let {wallets} = await getWallets(account._id)

        // make them the options of the dropdowns
        let html = wallets.map(generateOptionsHTML).join('')
        jQuery('.wallet-dropdown-select').html(html);
      }()

      // get all the wallets that are attached to the logged in developer
      async function getWallets(myDeveloperId) {
        let cookie = await getCookie();
        let res = await fetch(`/wallets/developer/${myDeveloperId}`, {
          headers: {
            'x-auth-key': cookie
          }
        })

        return res.json()
      }


      // ******SIGN MESSAGE******
      jQuery('#sign-message__form').on('submit', function(e) {
        e.preventDefault();

        // get message to sign
        let messageToSign = jQuery('[name=message]').val();

        // get wallet address
        let walletAddress = jQuery('#sign-message__form select').val();

        signMessageWrapper(messageToSign, walletAddress);

      })

      async function signMessageWrapper(messageToSign, walletAddress) {
        let cookie = await getCookie();

        let signedMessage = await signMessage(messageToSign, walletAddress);

        if (signedMessage === 'There was an error') {
          jQuery('[name=message]').val("");
          jQuery('#sign-message-message').addClass('message-box').addClass('error').html(`<i class="material-icons">error_outline</i><p>Something went horribly, horribly wrong.</p>`);
        } else {

          jQuery('[name=message]').val("");

          //print it to screen
          jQuery('#sign-message-message').addClass('message-box').addClass('success').html(`<i class="material-icons">favorite_border</i><p>Success!</p><br><br><p>Message: <span class="preformatted">${signedMessage.message.message}</span></p><br><br><p>Message Hash: <span class="preformatted">${signedMessage.message.messageHash}</span></p><br><br><p>Signature: <span class="preformatted">${signedMessage.message.signature}</span></p><br><br><p>Wallet Used: <span class="preformatted">${walletAddress}</span></p>`);
        }
      }

      async function signMessage(messageToSign, walletAddress) {
        let cookie = await getCookie();

        let res = await fetch(`/wallets/address/${walletAddress}/sign`, {
          method: 'POST',
          headers: {
            'x-auth-key': cookie,
            'content-type': 'application/json'
          },
          body: `{"message": "${messageToSign}"}`
        }).catch((e) => {
          console.log(e);
          return 'There was an error';
        })

        return res.json();
      }


      // ****** SIGN TRANSACTION *****
      jQuery('#sign-transaction__form').on('submit', function(e) {
        e.preventDefault();

        // get transaction to sign
        let transactionToSign = {
          to: jQuery('[name=to_addr]').val().trim(),
          value: jQuery('[name=value]').val(),
          gas: jQuery('[name=gas]').val()
        };

        // get wallet address
        let walletAddress = jQuery('#sign-message__form select').val();

        signTransactionWrapper(walletAddress, transactionToSign);

      })

      async function signTransactionWrapper(walletAddress, transaction) {
        let cookie = await getCookie();

        let signedTransaction = await signTransaction(walletAddress, transaction);

        if (signedTransaction === 'There was an error') {
          jQuery('[name=to_addr]').val("");
          jQuery('[name=value]').val("");
          jQuery('[name=gas]').val("");
          jQuery('#sign-transaction-message').addClass('message-box').addClass('error').html(`<i class="material-icons">error_outline</i><p>Something went horribly, horribly wrong.</p>`);
        } else {

          jQuery('[name=to_addr]').val("");
          jQuery('[name=value]').val("");
          jQuery('[name=gas]').val("");

          //print it to screen
          jQuery('#sign-transaction-message').addClass('message-box').addClass('success').html(`<i class="material-icons">favorite_border</i><p>Success!</p><br><br><p>Raw Transaction: <span class="preformatted">${signedTransaction.signedTransaction.rawTransaction}</span></p><br><br><p>Message Hash: <span class="preformatted">${signedTransaction.signedTransaction.messageHash}</span></p><br><br><p>Wallet Used: <span class="preformatted">${walletAddress}</span></p>`);
        }
      }

      async function signTransaction(walletAddress, transaction) {
        let cookie = await getCookie();

        let res = await fetch(`/wallets/address/${walletAddress}/signTransaction`, {
          method: 'POST',
          headers: {
            'x-auth-key': cookie,
            'content-type': 'application/json'
          },
          body: `{"transaction": { "to": "${transaction.to}", "value": ${transaction.value}, "gas": ${transaction.gas} }}`
        }).catch((e) => {
          console.log(e);
          return 'There was an error';
        })

        return res.json();
      }

      // ***** RECOVER TRANSACTION *****
      jQuery('#recover-transaction__form').on('submit', function(e) {
        e.preventDefault();

        // get transaction to validate
        let rawTxn = jQuery('[name=rawTxn]').val().trim();
        let walletAddress = jQuery('#recover-transaction__form select').val();

        recoverTransactionWrapper(walletAddress, rawTxn);

      })

      async function recoverTransactionWrapper(walletAddress, rawTxn) {
        let cookie = await getCookie();

        let recoveredTransaction = await recoverTransaction(walletAddress, rawTxn);

        if (recoveredTransaction === 'There was an error') {
          // clear form fields
          jQuery('[name=rawTxn]').val("");
          // print error message to screen
          jQuery('#recover-transaction-message').addClass('message-box').addClass('error').html(`<i class="material-icons">error_outline</i><p>Something went horribly, horribly wrong.</p>`);
        } else {
          // clear form fields
          jQuery('[name=rawTxn]').val("");
          //print it to screen
          jQuery('#recover-transaction-message').addClass('message-box').addClass('success').html(`<i class="material-icons">favorite_border</i><p>Success!</p><br><br><p>The wallet address that signed the transaction is: <span class="preformatted">${recoveredTransaction.address}</span></p>`);
        }
      }

      async function recoverTransaction(walletAddress, rawTxn) {
        let cookie = await getCookie();

        let res = await fetch(`/wallets/address/${walletAddress}/recoverTransaction`, {
          method: 'POST',
          headers: {
            'x-auth-key': cookie,
            'content-type': 'application/json'
          },
          body: `{ "rawTransaction": "${rawTxn}" }`
        }).catch((e) => {
          console.log(e);
          return 'There was an error';
        })

        return res.json();
      }


      // ***** HASH MESSAGE *****
      jQuery('#hash-message__form').on('submit', function(e) {
        e.preventDefault();

        // get message to hash
        let messageToHash = jQuery('[name=messagetohash]');
        let walletAddress = jQuery('#recover-transaction__form select').val();

        hashMessageWrapper(walletAddress, messageToHash);

      })

      async function hashMessageWrapper(walletAddress, message) {
        let cookie = await getCookie();

        let hashedMessage = await hashMessage(walletAddress, message);

        if (hashedMessage === 'There was an error') {
          jQuery('[name=messagetohash]').val("");
          jQuery('#hash-message-message').addClass('message-box').addClass('error').html(`<i class="material-icons">error_outline</i><p>Something went horribly, horribly wrong.</p>`);
        } else {
          jQuery('[name=messagetohash]').val("");
          jQuery('#hash-message-message').addClass('message-box').addClass('success').html(`<i class="material-icons">favorite_border</i><p>Success!</p><br><br><p>Hashed message: <span class="preformatted">${hashedMessage.hashedMessage}</span></p>`);
        }
      }

      async function hashMessage(walletAddress, message) {
        let cookie = await getCookie();

        let res = await fetch(`/wallets/address/${walletAddress}/hashMessage`, {
          method: 'POST',
          headers: {
            'x-auth-key': cookie,
            'content-type': 'application/json'
          },
          body: `{ "message": "${message}" }`
        }).catch((e) => {
          console.log(e);
          return 'There was an error';
        })

        return res.json();
      }


    </script>
  </body>
</html>
