<!DOCTYPE html>
<html>
<head>
  {{> head}}
</head>
  <body>
    <div class="nav-bar">
      <img class="logo hidden-xs" src="https://kelp.nyc3.digitaloceanspaces.com/logo.svg">
      <span class="hidden-xs"><h3><span class="title-box">Middleman</span></h3></span>
      <ul>
        <li id="nav-bar__wallets"><a href="/developers"><i class="material-icons">account_balance_wallet</i><span class="hidden-xs navbar-text"> Wallets</span></a></li>
        <li id="nav-bar__functions"><a href="/functions"><i class="material-icons">attach_money</i><span class="hidden-xs navbar-text"> Functions</span></a></li>
        <li id="nav-bar__docs"><a href="http://docs.middleman.cx" target="_blank"><i class="material-icons">description</i><span class="hidden-xs navbar-text"> Docs</span></a></li>
        <li id="nav-bar__account"><a href="/account"><i class="material-icons">account_box</i><span class="hidden-xs navbar-text"> Account</span></a></li>
        <li id="nav-bar__support"><a href="mailto:mayor@dani.town"><i class="material-icons">help_outline</i><span class="hidden-xs navbar-text"> Support</span></a></li>
      </ul>
    </div>
  <div class="main">
      <!--  CARDS FOR FUNCTIONS -->
    <div class="container">
      <h1>Wallet Functions<span class="badge">Beta</span></h1>
      <!-- sign message card -->
      <div class="card flex-card">
        <div class="card-content">
          <h3>Sign A Message</h3>
          <p class="subtext">You can use a Middleman wallet to sign messages.</p>
        </div>

        <div class="card-form">
          <form id="sign-message__form" autocomplete="off">
            <div class="form-field">
              <label>Message:</label><br>
              <input name="message" type="text" placeholder="message" autofocus />
            </div>
            <div class="form-field">
              <label>Choose a Wallet: </label><br>
                <div class="dropdown">
                <select class="wallet-dropdown-select" onchange="">
                </select>
              </div>
            </div>
            <button type="submit">Submit</button>
          </form>
          <div id="sign-message-message"></div>
        </div>

        <div class="card-api-instructions">
          <div class="card-api-instructions__code-sample">
            <code>curl -X POST "https://api.middleman.cloud/wallets" -H "X-Auth-Key: AUTHKEY"</code>
          </div>
          <button><i class="material-icons">exit_to_app</i>Docs</button>
        </div>
      </div>



      <!--  Sign Transaction Card -->
      <div class="card flex-card">
        <div class="card-content">
          <h3>Sign A Transaction</h3>
          <p class="subtext">You can use a Middleman wallet to sign transactions.</p>
        </div>

        <div class="card-form">
          <form id="sign-transaction__form" autocomplete="off">
            <div class="form-field">
              <label>To:</label><br>
              <input name="to_addr" type="text" placeholder="0x8d3e809fbd258083a5ba004a527159da535c8aba" autofocus />
            </div>
            <div class="form-field">
              <label>Amount of ETH:</label><br>
              <input name="value" type="text" placeholder="1 ETH" autofocus />
            </div>
            <div class="form-field">
              <label>Gas:</label><br>
              <input name="gas" type="text" placeholder="100000" autofocus />
            </div>
            <div class="form-field">
              <label>Choose a Wallet: </label><br>
                <div class="dropdown">
                <select class="wallet-dropdown-select" id="wallet-dropdown" onchange="">
                </select>
              </div>
            </div>
            <button type="submit">Submit</button>
          </form>
          <div id="sign-transaction-message"></div>
        </div>

        <div class="card-api-instructions">
          <div class="card-api-instructions__code-sample">
            <code>curl -X POST "https://api.middleman.cloud/wallets" -H "X-Auth-Key: AUTHKEY"</code>
          </div>
          <button><i class="material-icons">exit_to_app</i>Docs</button>
        </div>
      </div>

      <!-- recover txn card -->
      <div class="card flex-card">
        <div class="card-content">
          <h3>Recover A Transaction</h3>
          <p class="subtext">You can use a Middleman wallet to recover the address used to sign a transaction.</p>
        </div>

        <div class="card-form">
          <form id="recover-transaction__form" autocomplete="off">
            <div class="form-field">
              <label>Raw Transaction:</label><br>
              <input name="rawTxn" type="text" placeholder="0xf86180808401ef364594f0109fc8df283027b6285cc889f5aa624eac1f558" autofocus />
            </div>
            <div class="form-field">
              <label>Choose a Wallet: </label><br>
                <div class="dropdown">
                <select class="wallet-dropdown-select" id="wallet-dropdown" onchange="">
                </select>
              </div>
            </div>
            <button type="submit">Submit</button>
          </form>
          <div id="recover-transaction-message"></div>
        </div>

        <div class="card-api-instructions">
          <div class="card-api-instructions__code-sample">
            <code>curl -X POST "https://api.middleman.cloud/wallets" -H "X-Auth-Key: AUTHKEY"</code>
          </div>
          <button><i class="material-icons">exit_to_app</i>Docs</button>
        </div>
      </div>

      <!-- hash message card -->
      <div class="card flex-card">
        <div class="card-content">
          <h3>Hash A Message</h3>
          <p class="subtext">You can use a Middleman wallet to hash a message.</p>
        </div>

        <div class="card-form">
          <form id="hash-message__form" autocomplete="off">
            <div class="form-field">
              <label>Message:</label><br>
              <input name="messagetohash" type="text" placeholder="message" autofocus />
            </div>
            <div class="form-field">
              <label>Choose a Wallet: </label><br>
                <div class="dropdown">
                <select class="wallet-dropdown-select" onchange="">
                </select>
              </div>
            </div>
            <button type="submit">Submit</button>
          </form>
          <div id="hash-message-message"></div>
        </div>

        <div class="card-api-instructions">
          <div class="card-api-instructions__code-sample">
            <code>curl -X POST "https://api.middleman.cloud/wallets" -H "X-Auth-Key: AUTHKEY"</code>
          </div>
          <button><i class="material-icons">exit_to_app</i>Docs</button>
        </div>
      </div>

    </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script>

      // auth function that redirects user to login if not authed and otherwise returns dev info
      async function auth() {
        //  if no cookie, redirect to Login
        if (document.cookie === '') { window.location = '/login'; }

        // otherwise get id
        let developerId = await fetch('/developers/me', {
          headers: {
            'x-auth-key': document.cookie
          }
        }).catch((e) => {
          // error authenticating, redirect the user to login
          window.location = '/login';
        })
          return developerId.json()
      }

      // helper for generating options for wallets dropdown
      function generateOptionsHTML(wallet) {
        return `<option value=${wallet.address}>${wallet.address}</option>`;
      }

      //main
      void async function() {
        // make the functions link active
        jQuery('#nav-bar__functions').addClass('nav-bar-active');

        //first auth the user. devId is at account._id, email is at account.email
        let {account} = await auth();

        // display the user's email in the bottom corner
        jQuery('.nav-bar ul').append(`<li class="hidden-xs" id="nav-bar__email"><a href="#"><span id="user-email" class="hidden-xs navbar-text">${account.email}</span></a></li>`);

        // get all the user's wallets

        let {wallets} = await getWallets(account._id)

        // make them the options of the dropdowns
        let html = wallets.map(generateOptionsHTML).join('')
        jQuery('.wallet-dropdown-select').html(html);
      }()

      // get all the wallets that are attached to the logged in developer
      async function getWallets(myDeveloperId) {
        let res = await fetch(`/wallets/developer/${myDeveloperId}`, {
          headers: {
            'x-auth-key': document.cookie
          }
        })

        return res.json()
      }

      // ******SIGN MESSAGE******
      jQuery('#sign-message__form').on('submit', function(e) {
        e.preventDefault();

        // get message to sign
        let messageToSign = jQuery('[name=message]').val();

        // get wallet address
        let walletAddress = jQuery('#sign-message__form select').val();

        // go sign it
        jQuery.post({
          url: `/wallets/address/${walletAddress}/sign_message` ,
          type: 'post',
          data: {
            message: messageToSign
          },
          headers: {
            'x-auth-key': document.cookie
          }
        }, function(data, status) {
          // clear form field
          jQuery('[name=message]').val("");
          let signedMessage = JSON.parse(JSON.stringify(data)).message;

          //print it to screen
          jQuery('#sign-message-message').addClass('message-box').addClass('success').html(`<i class="material-icons">favorite_border</i><p>Success!</p><br><br><p>Message: <span class="preformatted">${signedMessage.message}</span></p><br><br><p>Message Hash: <span class="preformatted">${signedMessage.messageHash}</span></p><br><br><p>Signature: <span class="preformatted">${signedMessage.signature}</span></p><br><br><p>Wallet Used: <span class="preformatted">${walletAddress}</span></p>`);
        }).fail(function(xhr, status, error) {
          console.log(error);
          jQuery('[name=message]').val("");
          jQuery('#sign-message-message').addClass('message-box').addClass('error').html(`<i class="material-icons">error_outline</i><p>Something went horribly, horribly wrong.</p>`);
        })
      })

      // ****** SIGN TRANSACTION *****
      jQuery('#sign-transaction__form').on('submit', function(e) {
        e.preventDefault();

        // get transaction to sign
        let transactionToSign = {
          to: jQuery('[name=to_addr]').val(),
          value: jQuery('[name=value]').val(),
          gas: jQuery('[name=gas]').val()
        };

        // get wallet address
        let walletAddress = jQuery('#sign-message__form select').val();

        // go sign it
        jQuery.post({
          url: `/wallets/address/${walletAddress}/signTransaction` ,
          type: 'post',
          data: {
            "transaction": {
                "to": transactionToSign.to,
                "value": transactionToSign.value,
                "gas": transactionToSign.gas
              }
          },
          headers: {
            'x-auth-key': document.cookie
          }
        }, function(data, status) {
          // clear form field
          jQuery('[name=to_addr]').val("");
          jQuery('[name=value]').val("");
          jQuery('[name=gas]').val("");

          let signedTransaction = JSON.parse(JSON.stringify(data)).signedTransaction;

          //print it to screen
          jQuery('#sign-transaction-message').addClass('message-box').addClass('success').html(`<i class="material-icons">favorite_border</i><p>Success!</p><br><br><p>Raw Transaction: <span class="preformatted">${signedTransaction.rawTransaction}</span></p><br><br><p>Message Hash: <span class="preformatted">${signedTransaction.messageHash}</span></p><br><br><p>Wallet Used: <span class="preformatted">${walletAddress}</span></p>`);
        }).fail(function(xhr, status, error) {
          console.log(error);
          jQuery('[name=to_addr]').val("");
          jQuery('[name=value]').val("");
          jQuery('[name=gas]').val("");

          jQuery('#sign-transaction-message').addClass('message-box').addClass('error').html(`<i class="material-icons">error_outline</i><p>Something went horribly, horribly wrong.</p>`);
        })
      })

      // ***** RECOVER TRANSACTION *****
      jQuery('#recover-transaction__form').on('submit', function(e) {
        e.preventDefault();

        // get transaction to validate
        let rawTxn = jQuery('[name=rawTxn]').val();
        let walletAddress = jQuery('#recover-transaction__form select').val();

        jQuery.post({
          url: `/wallets/address/${walletAddress}/recoverTransaction` ,
          type: 'post',
          data: {
            "rawTransaction": `${rawTxn}`
          },
          headers: {
            'x-auth-key': document.cookie
          }
        }, function(data, status) {

          // clear form fields
          jQuery('[name=rawTxn]').val("");

          // get the answer
          let recoveredTransaction = JSON.parse(JSON.stringify(data)).address;

          //print it to screen
          jQuery('#recover-transaction-message').addClass('message-box').addClass('success').html(`<i class="material-icons">favorite_border</i><p>Success!</p><br><br><p>The wallet address that signed the transaction is: <span class="preformatted">${recoveredTransaction}</span></p>`);

        }).fail(function(xhr, status, error) {
          console.log(error);

          // clear form fields
          jQuery('[name=rawTxn]').val("");

          // print error message to screen
          jQuery('#recover-transaction-message').addClass('message-box').addClass('error').html(`<i class="material-icons">error_outline</i><p>Something went horribly, horribly wrong.</p>`);
        })
      })

      // ***** HASH MESSAGE *****
      jQuery('#hash-message__form').on('submit', function(e) {
        e.preventDefault();

        // get message to hash
        let messageToHash = jQuery('[name=messagetohash]');
        let walletAddress = jQuery('#recover-transaction__form select').val();

        jQuery.post({
          url: `/wallets/address/${walletAddress}/hashMessage` ,
          type: 'post',
          data: {
            "message": `${messageToHash}`
          },
          headers: {
            'x-auth-key': document.cookie
          }
        }, function(data, status) {
          //clear form fields
          jQuery('[name=messagetohash]').val("");

          // get answer
          let hashedMessage = JSON.parse(JSON.stringify(data)).hashedMessage;

          //print to screen
          jQuery('#hash-message-message').addClass('message-box').addClass('success').html(`<i class="material-icons">favorite_border</i><p>Success!</p><br><br><p>Hashed message: <span class="preformatted">${hashedMessage}</span></p>`);

        }).fail(function(xhr, status, error) {
          console.log(error);
          jQuery('[name=messagetohash]').val("");
          jQuery('#hash-message-message').addClass('message-box').addClass('error').html(`<i class="material-icons">error_outline</i><p>Something went horribly, horribly wrong.</p>`);
        })
      })


    </script>
  </body>
</html>
